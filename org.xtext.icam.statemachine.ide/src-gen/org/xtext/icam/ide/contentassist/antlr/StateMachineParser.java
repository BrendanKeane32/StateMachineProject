/*
 * generated by Xtext 2.12.0
 */
package org.xtext.icam.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.icam.ide.contentassist.antlr.internal.InternalStateMachineParser;
import org.xtext.icam.services.StateMachineGrammarAccess;

public class StateMachineParser extends AbstractContentAssistParser {

	@Inject
	private StateMachineGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalStateMachineParser createParser() {
		InternalStateMachineParser result = new InternalStateMachineParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getVisibilityAccess().getAlternatives(), "rule__Visibility__Alternatives");
					put(grammarAccess.getStateMachineAccess().getGroup(), "rule__StateMachine__Group__0");
					put(grammarAccess.getEventAccess().getGroup(), "rule__Event__Group__0");
					put(grammarAccess.getCommandAccess().getGroup(), "rule__Command__Group__0");
					put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
					put(grammarAccess.getStateAccess().getGroup_3(), "rule__State__Group_3__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getModelAccess().getStatemachineAssignment(), "rule__Model__StatemachineAssignment");
					put(grammarAccess.getStateMachineAccess().getNameAssignment_1(), "rule__StateMachine__NameAssignment_1");
					put(grammarAccess.getStateMachineAccess().getEventsAssignment_3(), "rule__StateMachine__EventsAssignment_3");
					put(grammarAccess.getStateMachineAccess().getCommandsAssignment_4(), "rule__StateMachine__CommandsAssignment_4");
					put(grammarAccess.getStateMachineAccess().getStatesAssignment_5(), "rule__StateMachine__StatesAssignment_5");
					put(grammarAccess.getStateMachineAccess().getInitialeventsAssignment_7(), "rule__StateMachine__InitialeventsAssignment_7");
					put(grammarAccess.getStateMachineAccess().getFinaleventsAssignment_9(), "rule__StateMachine__FinaleventsAssignment_9");
					put(grammarAccess.getEventAccess().getNameAssignment_1(), "rule__Event__NameAssignment_1");
					put(grammarAccess.getCommandAccess().getNameAssignment_1(), "rule__Command__NameAssignment_1");
					put(grammarAccess.getModifierAccess().getVisibilityAssignment(), "rule__Modifier__VisibilityAssignment");
					put(grammarAccess.getStateAccess().getModifierAssignment_0(), "rule__State__ModifierAssignment_0");
					put(grammarAccess.getStateAccess().getNameAssignment_2(), "rule__State__NameAssignment_2");
					put(grammarAccess.getStateAccess().getActionsAssignment_3_2(), "rule__State__ActionsAssignment_3_2");
					put(grammarAccess.getStateAccess().getTransitionsAssignment_4(), "rule__State__TransitionsAssignment_4");
					put(grammarAccess.getTransitionAccess().getEventAssignment_1(), "rule__Transition__EventAssignment_1");
					put(grammarAccess.getTransitionAccess().getStateAssignment_3(), "rule__Transition__StateAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public StateMachineGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(StateMachineGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
