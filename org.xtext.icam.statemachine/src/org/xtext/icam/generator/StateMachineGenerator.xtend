/*
 * generated by Xtext 2.12.0
 */
package org.xtext.icam.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.icam.stateMachine.State
import org.xtext.icam.stateMachine.StateMachine
import org.xtext.icam.stateMachine.Event
import java.util.ArrayList

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class StateMachineGenerator extends AbstractGenerator {

	ArrayList<String> types = new ArrayList<String>();
	ArrayList<String> parameters = new ArrayList<String>();
	ArrayList<String> jointList = new ArrayList<String>();
	int i = 0;
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		resource.allContents.filter(typeof(StateMachine)).forEach[it.generateMachine(fsa,resource)]  //gen machine
		resource.allContents.filter(typeof(StateMachine)).forEach[it.generateInterface(fsa,resource)]  //gen interface
		resource.allContents.filter(typeof(StateMachine)).forEach[it.generateEnum(fsa,resource)]  //gen enum
		}
	
	def void generateMachine(StateMachine machine, IFileSystemAccess2 fsa,Resource resource) {
		fsa.generateFile(machine.name+".java", machine.toJavaCode)
	}
	
	def void generateInterface(StateMachine machine, IFileSystemAccess2 fsa,Resource resource) {
		fsa.generateFile(machine.name+"Interface.java", machine.toInterfaceCode)
	}
	
	def void generateEnum(StateMachine machine, IFileSystemAccess2 fsa,Resource resource) {
		fsa.generateFile(machine.name+"State.java", machine.toEnumCode)
	}
			
	
	//state = "«s.transitions.map(t | t.state.name).join»";
	//«a.condition.name.toFirstUpper»()==true
	
	def CharSequence toJavaCode(StateMachine machine)'''
	//Generated code, do not edit
				
	abstract class «machine.name» implements «machine.name»Interface {
		
		//
		protected «machine.name»State state = «machine.name»State.«machine.initialstates.name»;				
		//String state = "«machine.initialstates.name»";
			
			public void loop() {
				while (true) {
			«FOR s: machine.states»
				if(state == «machine.name»State.«s.name»){
					turn«s.name.toFirstUpper»();
					«FOR a:s.transitions»
					if(«a.event.name.toFirstUpper»()==true && «a.condition.name.toFirstUpper»()==true){
						state = «machine.name»State.«a.state.name»;
						}
					«ENDFOR»
					}
			«ENDFOR»		
			}
			}
		}
		'''	
			
			def CharSequence toInterfaceCode(StateMachine machine)'''
			
			public interface «machine.name»Interface {
				
				void setUp();
				
				«FOR s: machine.states»
				public void turn«s.name.toFirstUpper»();
				«ENDFOR»
				
				«FOR e: machine.events»
				
				«FOR d:e.tests»
				«FOR f:d.args»
				
				«e.returnType.type» «e.name» («d.types.map[t | t.type].join( f.name.value)»);
				«ENDFOR»
				«ENDFOR»
				
				«ENDFOR»
				}
			'''
			//s.transitions.map(t | t.state.name).join
			
			def CharSequence toEnumCode(StateMachine machine)'''
			
			public enum «machine.name»State {
				
			«FOR c:machine.states»
			«c.name»,
			«ENDFOR»};
			'''
			
			
}