/*
 * generated by Xtext 2.12.0
 */
package org.xtext.icam.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.icam.stateMachine.Command
import org.xtext.icam.stateMachine.State
import org.xtext.icam.stateMachine.StateMachine

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class StateMachineGenerator extends AbstractGenerator {

	 
	
	
	State firstState
	
	State lastState
	
	String midleOne
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		resource.allContents.filter(typeof(StateMachine)).forEach[it.generateMachine(fsa,resource)]
		
	//	firstStateName = firstState.name
		}
	
	def void generateMachine(StateMachine machine, IFileSystemAccess2 fsa,Resource resource) {
		firstState = resource.allContents.filter(typeof(State)).head
		lastState = resource.allContents.filter(typeof(State)).last
		resource.allContents.filter(typeof(State)).forEach[it.verifyMe(firstState,lastState)]
		fsa.generateFile(machine.name+".java", machine.toJavaCode)
	}
	
	def void verifyMe(State state, State firststate, State laststate){
		if((!state.name.equals(firststate.name)) && (!state.name.equals(laststate.name))){
			midleOne=state.name
		}
	}
	
	def CharSequence toJavaCode(StateMachine machine)'''
	//Generated code, do not edit
				
				
				
				abstract class «machine.name» implements StateMachineInterface{
					
					enum myStates {
					«FOR c : machine.states»
						«c.name»,
					«ENDFOR»}
					
					public void loop(){
						if(state == «firstState.name»){
							if(event == null){
								else if(timerUp && c){
									state = «midleOne»
								}
							}
						}
						
					public void reset(){
						
					}
				}
			'''	
}

